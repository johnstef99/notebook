[["index.html", "Εργασία AMPL Επιχειρησιακή Έρευνα 8ο Εξάμηνο 1 Το Πρόβλημα 1.1 Σχέδιο Σωτηρία (έγγραφα) 1.2 Σχέδιο Σωτηρία (εμβόλια covid)", " Εργασία AMPL Επιχειρησιακή Έρευνα 8ο Εξάμηνο Στεφανίδης Ιωάννης 2021-07-27 1 Το Πρόβλημα 1.1 Σχέδιο Σωτηρία (έγγραφα) Σημαντικά κρατικά έγγραφα/αρχεία μιας χώρας είναι αποθηκευμένα σε κεντρικό χώρο της πρωτεύουσάς της. Σε περίπτωση κρίσης κρίθηκε σκόπιμο να μεταφερθούν όλα αυτά με ειδικά μέσα μεταφοράς, που αποκτήθηκαν με ιδιαίτερα υψηλό κόστος, σε άλλες πόλεις της χώρας για να αποφευχθεί είτε η μαζική καταστροφή τους είτε η μαζική κατοχή τους απο μη εξουσιοδοτημένους φορείς. Για το λόγο αυτό η χώρα μπορεί να διαθέσει μέχρι 8 ειδικά μέσα μεταφοράς, όπου το κάθε ένα μέσο είναι δυνατόν να μεταφέρει όλο το αρχειακό υλικό που είναι αποθηκευμένο στην πρωτεύουσα. Ο περιορισμός είναι ότι το διαθέσιμο καύσιμο, που έχει το κάθε μέσο, του επιτρέπει να διανύσει το μέγιστο 400 χιλιόμετρα, ενώ στο σενάριο που εξετάζεται δεν προβλέπεται ανεφοδιασμός των παραπάνω μέσων μεταφοράς. Στον παρακάτω Πίνακα 1 δίνονται οι αποστάσεις (σε χιλιόμετρα) μεταξύ του αρχικού αποθηκευτικού χώρου Α και των 14 πόλεων (B1, B2, . . . , B14) καθώς και μεταξύ των 14 πόλεων. Σε κάθε μία από τις 14 πολεις υπάρχει σχεδιασμός να μεταφερθεί, απο την πρωτεύουσα, τουλάχιστον ένα αρχείο/έγγραφο σε περίοδο κρίσης. Ζητούμενο είναι να βρεθεί ο ελάχιστος αριθμός των ειδικών μέσων μεταφοράς που απαιτούνται για να γίνει η παραπάνω μεταφορά. Στην περίπτωση, που για την επιτυχή περάτωση του Σχεδίου 1, ειδικά μέσα μεταφοράς περισσέψουν, τότε αυτά θα μπορούσαν να υποστηρίξουν την μεταφορά υλικού (π.χ. ιατροφαρμακευτικού) όπως περιγράφεται στο παρακάτω Σχέδιο 2 pre { white-space:none; } Table 1.1: Distances (near=green and far=red) TownB1B2B3B4B5B6B7B8B9B10B11B12B13B14 A18024085285205235255155120230340220160240 B1025515012510017523525659521055135215 B225501602351601054524525519522531011550 B3150160021512515017013011016026020075150 B41252352150901301951501905085155155185 B5100160125900701351101354013515565120 B617510515013070070175200951252257055 B72354517019513570023525016518029011020 B82524513015011017523504011022570130215 B965255110190135200250400145265100135230 B10951951605040951651101450115135105150 B11210225260851351251802252651150240185175 B1255310200155155225290701001352400190270 B13135115751556570110130135105185190090 1.2 Σχέδιο Σωτηρία (εμβόλια covid) Απόφαση της κυβέρνησης είναι τα ειδικά μέσα μεταφοράς, που πιθανά δεν θα απαιτηθούν για την επιτυ- χή περάτωση του Σχεδίου 1, να υποστηριξούν την γενικότερη προσπάθεια μεταφοράς άλλου υλικού (ας υποθέσουμε ιατροφαρμακευτικού υλικού). Συγκεκριμένα, το Σχέδιο 2 προβλέπει ότι αυτά θα πρέπει να ξεκινήσουν υπό τη μορφή κομβόι από την πρωτεύουσα Α γεμάτα ιατροφαρμακευτικό υλικό, να επισκε- φτούν και τις 6 απομακρυσμένες πόλεις (Γ1, Γ2, . . . , Γ6) και να επιστρέψουν πίσω στην πρωτεύουσα. Ο εκτιμώμενος χρόνος ταξιδιού (σε λεπτά) από την πρωτεύουσα στις άλλες πόλεις όπως και μεταξύ των 6 πόλεων δίνεται στον Πίνακα 2. Σε αυτό το σχέδιο, επιτρέπεται ο ανεφοδιασμός των ειδικών μέσων μεταφοράς με καύσιμα και μπορείτε να υποθέσετε οτι ο χρόνος που απαιτείται για τον ανεφοδιασμό είναι μηδενικός. Ζητούμενο είναι η σειρά με την οποία θα πρέπει τα ειδικά μέσα μεταφοράς να επισκεφτούν τις πόλεις αυτές ώστε να ελαχιστοποιηθεί ο συνολικός χρόνος μεταφοράς του ιατροφαρμακευτικού υλικού. Table 1.2: Minutes (near=green and far=red) TownB1B2B3B4B5B6 A786549657331559250 B10668979593224905 B26680316607472467 B39793160890769400 B45936078900386559 B52244727693860681 "],["μεταφορά-εγγράφων.html", "2 Μεταφορά Εγγράφων 2.1 Τρόπος Σκέψης 2.2 Περιορισμοί 2.3 Δεδομένα AMPL 2.4 Mοντέλο AMPL 2.5 Αποτελέσματα", " 2 Μεταφορά Εγγράφων 2.1 Τρόπος Σκέψης Στο 1o ερώτημα θέλουμε να χρησιμοποιήσουμε τον ελάχιστο αριθμό φορτηγών για να επισκεφτούμε όλες τις πόλεις έστω και μία φορά. Αρχικά σκέφτηκα να χρησιμοποιήσω έναν πίνακα BEGIN\\(\\times\\)END για κάθε φορτηγό, άρα το αποτέλεσμα που θα έπαιρνα από την AMPL θα ήταν ένας πίνακας Go[TRUCK,BEGIN,END]. Έτσι θα μπορούσα να ορίσω τον πίνακα ως binary και να έχω την τιμή 1 αν το φορτηγό έκανε την διαδρομή row-&gt;column. Το πρόβλημα που αντιμετώπισα ήταν ότι δεν μπορούσα έτσι να ελέγξω αν το φορτηγό κάνει συνεχόμενη διαδρομή, δηλαδή αν πάει από το A-&gt;B1 μετά να πάει από το B1-&gt;Bx. Κατέληξα λοιπόν να προσθέσω ακόμα μια διάσταση στον πίνακα Go, την διάσταση του χρόνου. Οπότε τώρα έχουμε έναν πίνακα Go[TRUCK,BEGIN,END,TIME] όπου για κάθε TIME το φορτηγό θα κάνει μία κίνηση, δηλαδή για ΤΙΜΕ=1 το φορτηγό θα πάει από A-&gt;Bx, και τώρα μπορούμε να δημιουργήσουμε περιορισμό ότι για TIME=2 το φορτηγό θα ξεκινήσει από το τέλος του ΤΙΜΕ=1 το Bx. Επίσης όπως θα δείτε στην συνέχεια στα Δεδομένα έχει προστεθεί ένας επιπλέον προορισμός E. Αυτό είναι απαραίτητο ώστε ο περιορισμός 7 να μπορεί να ισχύει για το τελευταίο Β που θα επισκεφτεί το φορτηγό. Τέλος στο Μοντέλο έχουμε 2 objective functions total_distance και num_of_trucks. Η AMPL επιλέγει αυτόματα την πρώτη objective συνάρτηση, αλλά και με την δεύτερη παίρνουμε το ίδιο αποτέλεσμα (την έχω αφήσει για να κάνω display τον αριθμό των φορτηγών). 2.2 Περιορισμοί Κάθε φορτηγό μπορεί να κάνει το πολύ 400 χιλιόμετρα Πρέπει να περάσουμε απ’ όλες τις πόλεις Αρχή \\(\\neq\\) Τέλος: να μην διαλέξουμε ποτέ μια διαδρομή που η αρχή είναι ίδια με το τέλος (δεν βγάζει φυσικό νόημα, αλλά στην AMPL πρέπει να διευκρινιστεί). Ξεκίνημα από την αφετηρία: κάθε φορτηγό για TIME=1 πρέπει να ξεκινάει από το Α. Μια κίνηση την φορά: σε κάθε TIME κάνε μία ή καμία κίνηση. Μην αφήσεις κενά TIME: αν χρησιμοποιήσεις το TIME=n να έχεις χρησιμοποιήσει πρώτα το TIME=n-1. Διαδοχικές κινήσεις: αν για ΤΙΜΕ=n: A-&gt;B1, τότε για TIME=n+1 B1-&gt;Bx. Μην πας από την αρχή στο τέλος: ο περιορισμός αυτός χρειάζεται γιατί εφόσον για να πάω από το Α στο Ε είναι 0 χιλιόμετρα η AMPL θα κάνει κάθε φορά αυτή την κίνηση ακόμα και σε φορτηγά που δεν χρησιμοποιούμε, ενώ δεν χρειάζεται. 2.3 Δεδομένα AMPL trucks.dat set BEGIN := A B1 B2 B3 B4 B5 B6 B7 B8 B9 B10 B11 B12 B13 B14; set END := B1 B2 B3 B4 B5 B6 B7 B8 B9 B10 B11 B12 B13 B14 E; set TRUCK := T1 T2 T3 T4 T5 T6 T7 T8; param start:= A; param end:= E; param distance: B1 B2 B3 B4 B5 B6 B7 B8 B9 B10 B11 B12 B13 B14 E := A 180 240 085 285 205 235 255 155 120 230 340 220 160 240 0 B1 000 255 150 125 100 175 235 025 065 095 210 055 135 215 0 B2 255 000 160 235 160 105 045 245 255 195 225 310 115 050 0 B3 150 160 000 215 125 150 170 130 110 160 260 200 075 150 0 B4 125 235 215 000 090 130 195 150 190 050 085 155 155 185 0 B5 100 160 125 090 000 070 135 110 135 040 135 155 065 120 0 B6 175 105 150 130 070 000 070 175 200 095 125 225 070 055 0 B7 235 045 170 195 135 070 000 235 250 165 180 290 110 020 0 B8 025 245 130 150 110 175 235 000 040 110 225 070 130 215 0 B9 065 255 110 190 135 200 250 040 000 145 265 100 135 230 0 B10 095 195 160 050 040 095 165 110 145 000 115 135 105 150 0 B11 210 225 260 085 135 125 180 225 265 115 000 240 185 175 0 B12 055 310 200 155 155 225 290 070 100 135 240 000 190 270 0 B13 135 115 075 155 065 070 110 130 135 105 185 190 000 090 0 B14 215 050 150 185 120 055 020 215 230 150 175 270 090 000 0 ; 2.4 Mοντέλο AMPL trucks.mod set BEGIN ordered; set END ordered; set TRUCK ordered; set BEE = BEGIN inter END ordered; set TIME = {1..card(BEE)+1} ordered; param start symbolic in BEGIN; param end symbolic in END; param distance {BEGIN, END} &gt;= 0 integer; var Go {TRUCK, BEGIN, END, TIME} binary; # minimizing total distance also minimizes the number of trucks minimize total_distance: sum {t in TRUCK, b in BEGIN, e in END, n in TIME} (Go[t,b,e,n] * distance[b,e]); # minimizing the number of trucks also minimizes the total distance minimize num_of_trucks: sum{t in TRUCK,e in END} Go[t,start,e,1]; # 400km per truck subject to kilometre {t in TRUCK}: sum{b in BEGIN, e in END, n in TIME} (Go[t,b,e,n] * distance[b,e]) &lt;= 400; # visit every town subject to go_at_least_once {e in END}: sum{t in TRUCK, b in BEGIN, n in TIME} Go[t,b,e,n] &gt;= 1; # avoid choosing distance[i,j]=0 where i==j subject to end_equals_begin {t in TRUCK, i in BEE, n in TIME}: Go[t,i,i,n] = 0; # every truck should start from A subject to start_from_a {t in TRUCK}: sum{b in BEE, e in END} Go[t,b,e,1] = 0; # make only one move for every TIME subject to every_time_move_once {t in TRUCK, n in TIME}: sum{b in BEGIN, e in END} Go[t,b,e,n] &lt;= 1; # move from time 1 to time 2 1-&gt;2-&gt;3 subject to move_in_order {t in TRUCK, n in 1..last(TIME)-1}: sum{b in BEGIN, e in END} Go[t,b,e,n] &gt;= sum{b in BEGIN, e in END} Go[t,b,e,n+1]; # if you move from A-&gt;B2 the next move should start from B2 subject to continuous_movement {t in TRUCK, n in 2..last(TIME), b in BEE}: sum{e in END} Go[t,b,e,n] = sum{i in BEGIN} Go[t,i,b,n-1]; # never go from start to end (A-&gt;E) subject to ae {t in TRUCK, n in TIME}: Go[t,start,end,n] = 0; 2.5 Αποτελέσματα Τρέχουμε τις εξής ενοτλές: trucks.ampl reset; model trucks.mod; data trucks.dat; option solver cplex; option show_stats 1; option omit_zero_rows 1; objective total_distance; solve; display Go; display total_distance; display num_of_trucks; Table 2.1: Results (ampl output) TruckFromToTimeGo T1AB911 T1B1B1241 T1B8B131 T1B9B821 T1B12E51 T2AB311 T2B2E71 T2B3B1321 T2B6B1441 T2B7B261 T2B13B631 T2B14B751 T8AB511 T8B4B1141 T8B5B1021 T8B10B431 T8B11E51 Στον πίνακα Go στην 1η στήλη βλέπουμε τον αριθμό του φορτηγού, στην 2η από που ξεκίνησε και στην 3η που πήγε. Στην 4η στήλη φαίνεται η στιγμή που έκανε το φορτηγό την συγκεκριμένη διαδρομή, άρα βλέποντας την 4η στήλη μπορούμε εύκολα να βρούμε την πορεία του φορτηγού. Άρα χρησιμοποιήσαμε 3 φορτηγά και κάναμε σύνολο 970 χιλιόμετρα. Διαδρομές: T1 A -&gt; B3 -&gt; B13 -&gt; B6 -&gt; B14 -&gt; B7 -&gt; B2 T2 A -&gt; B5 -&gt; B10 -&gt; B4 -&gt; B11 T8 A -&gt; B9 -&gt; B8 -&gt; B1 -&gt; B12 "],["μεταφορά-εμβολίων.html", "3 Μεταφορά Εμβολίων 3.1 Τρόπος Σκέψης 3.2 Περιορισμοί 3.3 Δεδομένα AMPL 3.4 Mοντέλο AMPL 3.5 Αποτελέσματα", " 3 Μεταφορά Εμβολίων 3.1 Τρόπος Σκέψης Στο 2ο ερώτημα ζητείτε να βρεθεί η πιο σύντομη σε χρόνο διαδρομή που περνάει απ’ όλες τις πόλεις και επιστρέφει στην πρωτεύουσα. Έχοντας ήδη κάνει το 1ο ερώτημα, μπορούμε να τροποποιήσουμε ελάχιστα το μοντέλο μας για να είναι λειτουργικό σε αυτό το πρόβλημα. Περνάμε λοιπόν τα νέα δεδομένα αλλά αυτή την φορά ορίζουμε μόνο ένα φορτηγό, αφού μας δίνεται ότι τα 5 φορτηγά θα φύγουν κομβόι. Στο μοντέλο θα αντικαταστήσουμε τον πίνακα distance με minutes καθώς και θα αλλάξουμε τον περιορισμό για την εκκίνηση από την αφετηρία ώστε να εννοούμε να χρησιμοποιηθεί κάθε διαθέσιμο φορτηγό (στην περίπτωση μας είναι μόνο 1). 3.2 Περιορισμοί Έχουμε μόνο έναν νέο περιορισμό: Επιστροφή στην πρωτεύουσα: θέλουμε η κίνηση που θα γίνει στο τελευταίο TIME να έχει προορισμό την πρωτεύουσα (που έχει ονομαστεί και A και Ε) 3.3 Δεδομένα AMPL trucks2.dat set BEGIN := A B1 B2 B3 B4 B5 B6; set END := B1 B2 B3 B4 B5 B6 E; set TRUCK := T1 ; param start:= A; param end:= E; param minutes: B1 B2 B3 B4 B5 B6 E := A 786 549 657 331 559 250 000 B1 000 668 979 593 224 905 786 B2 668 000 316 607 472 467 549 B3 979 316 000 890 769 400 657 B4 593 607 890 000 386 559 331 B5 224 472 769 386 000 681 559 B6 905 467 400 559 681 000 250 ; 3.4 Mοντέλο AMPL trucks2.mod set BEGIN ordered; set END ordered; set TRUCK ordered; set BEE = BEGIN inter END ordered; set TIME = {1..card(BEE)+1} ordered; param start symbolic in BEGIN; param end symbolic in END; param minutes {BEGIN, END} &gt;= 0 integer; var Go {TRUCK, BEGIN, END, TIME} binary; # minimizing total minutes on road minimize total_time: sum {t in TRUCK, b in BEGIN, e in END, n in TIME} (Go[t,b,e,n] * minutes[b,e]); # visit every town subject to go_at_least_once {e in END}: sum{t in TRUCK, b in BEGIN, n in TIME} Go[t,b,e,n] &gt;= 1; # avoid chosing distance[i,j]=0 where i==j subject to end_equals_begin {t in TRUCK, i in BEE, n in TIME}: Go[t,i,i,n] = 0; # every truck should start from A subject to start_from_a {t in TRUCK}: sum{e in END} Go[t,start,e,1] = 1; # make only one move for every TIME subject to every_time_move_once {t in TRUCK, n in TIME}: sum{b in BEGIN, e in END} Go[t,b,e,n] &lt;= 1; # move from time 1 to time 2 1-&gt;2-&gt;3 subject to move_in_order {t in TRUCK, n in 1..last(TIME)-1}: sum{b in BEGIN, e in END} Go[t,b,e,n] &gt;= sum{b in BEGIN, e in END} Go[t,b,e,n+1]; # if you move from A-&gt;B2 the next move should start from B2 subject to continuous_movement {t in TRUCK, n in 2..last(TIME), b in BEE}: sum{e in END} Go[t,b,e,n] = sum{i in BEGIN} Go[t,i,b,n-1]; # never go from start to end (A-&gt;E) subject to ae {t in TRUCK, n in TIME}: Go[t,start,end,n] = 0; # the last move you make should end at E subject to finishAtE {t in TRUCK}: sum{b in BEGIN} Go[t,b,end,last(TIME)] = 1; 3.5 Αποτελέσματα Τρέχουμε τις εξής ενοτλές: trucks2.ampl reset; model trucks2.mod; data trucks2.dat; option solver cplex; #option display_round 0; option show_stats 1; option omit_zero_rows 1; #option omit_zero_cols 1; solve; display Go; display total_time; Table 2.1: Results (ampl output) TruckFromToTimeGo T1AB411 T1B1B241 T1B2B351 T1B3B661 T1B4B521 T1B5B131 T1B6E71 Το format του πίνακα Go είναι ίδιο με προηγουμένως, και βρίσκουμε ότι χρειαζόμαστε τουλάχιστον 2575 λεπτά για να πάμε σε όλες τις πόλεις και να γυρίσουμε στην πρωτεύουσα. Διαδρομή: A -&gt; B4 -&gt; B5 -&gt; B1 -&gt; B2 -&gt; B3 -&gt; B6 -&gt; A "]]
